custom: ${file(./env.yml)}

service: listopolis-0

plugins:
  - serverless-webpack

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs4.3
  environment:
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

# you can overwrite defaults here
  stage: dev
  region: us-east-1

  memorySize: 128

functions:
  create:
    handler: handler.createList
    events:
      - http:
          path: lists
          method: post
          integration: lambda
          cors: true
          authorizer:
            arn: ${self:custom.authorizerArn}
  list:
    handler: handler.listLists
    events:
      - http:
          path: lists
          method: get
          integration: lambda
          cors: true
          authorizer:
            arn: ${self:custom.authorizerArn}
  get:
    handler: handler.getList
    events:
      - http:
          path: lists/{id}
          method: get
          integration: lambda
          cors: true
          authorizer:
            arn: ${self:custom.authorizerArn}
  delete:
    handler: handler.deleteList
    events:
      - http:
          path: lists/{id}
          method: delete
          integration: lambda
          cors: true
          authorizer:
            arn: ${self:custom.authorizerArn}

# DynamoDB settings
resources:
  Resources:
    ListsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
          -
            AttributeName: userId
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
          -
            AttributeName: userId
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
        LocalSecondaryIndexes:
          -
            IndexName: 'userId-index'
            KeySchema:
              -
                AttributeName: id
                KeyType: HASH
              -
                AttributeName: userId
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
